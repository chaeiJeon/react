{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  postAdded: false,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(20).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // ACTION이름을 상수로 빼준 이유 : 중간에 오타를 막기 위해(변수로 지정하면 오타나면 오류가 난다)\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'codl'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  User: {\n    id: 1,\n    nickname: 'hal'\n  },\n  content: data\n});\n\nexport default ((state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = state.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.postId);\n      post.Comments.unshift(dummyComment(action.data.content));\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.mainPosts;\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n\n    default:\n      break;\n  }\n}));","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","postAdded","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","state","action","draft","unshift","error","filter","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    postAdded: false,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n};\r\nexport const generateDummyPost = (number) => Array(20).fill().map((v, i)=>({\r\n    id : shortId.generate(),\r\n    User : {\r\n        id : shortId.generate(),\r\n        nickname : faker.name.findName(),\r\n    },\r\n    content : faker.lorem.paragraph(),\r\n    Images : [{\r\n        src : faker.image.image(),\r\n    }],\r\n    Comments : [{\r\n        User : {\r\n            id : shortId.generate(),\r\n            nickname : faker.name.findName(),\r\n        },\r\n        content : faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\r\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\r\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\r\n\r\n\r\n// ACTION이름을 상수로 빼준 이유 : 중간에 오타를 막기 위해(변수로 지정하면 오타나면 오류가 난다)\r\nexport const addPost= (data) => ({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\nexport const addComment= (data) => ({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content : data.content,\r\n    User : {\r\n        id:1,\r\n        nickname : 'codl',\r\n    },\r\n    Images : [],\r\n    Comments : [],\r\n});\r\nconst dummyComment = (data) =>({\r\n    id : shortId.generate(),\r\n    User : {\r\n        id : 1,\r\n        nickname : 'hal'\r\n    },\r\n    content : data,\r\n})\r\n\r\nexport default (state=initialState, action)=> produce(state,(draft)=>{\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone=false;\r\n                draft.addPostError=null;\r\n                break;\r\n        case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n        case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n        case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n        case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = state.mainPosts.filter((v)=>v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n        case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n        case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n        case ADD_COMMENT_SUCCESS: \r\n                const post = draft.mainPosts.find((v)=>v.id===action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone= true;\r\n                break;\r\n        case ADD_COMMENT_REQUEST : \r\n                draft.mainPosts;\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n        case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n        default : \r\n            break;\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}