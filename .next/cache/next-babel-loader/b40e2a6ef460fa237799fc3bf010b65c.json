{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddCommentPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            //put=dispatch 라고 생각하기, 액션 객체 dispatch\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('saga addPost');\n          console.log(action);\n          _context2.prev = 2;\n          _context2.next = 5;\n          return delay(1000);\n\n        case 5:\n          //result = yield call(addPostAPI, action.data)\n          // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n          id = shortId.generate();\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 8:\n          _context2.next = 10;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 10:\n          _context2.next = 16;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 16;\n          return put({\n            //put=dispatch 라고 생각하기, 액션 객체 dispatch\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 12]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          //result = yield call(addPostAPI, action.data)\n          // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n          id = shortId.generate();\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            //put=dispatch 라고 생각하기, 액션 객체 dispatch\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('watchAddPost');\n          _context6.next = 3;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddCommentPost() {\n  return _regeneratorRuntime.wrap(function watchAddCommentPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddCommentPost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/post.js"],"names":["loadPosts","addPost","removePost","addComment","watchLoadPosts","watchAddPost","watchAddCommentPost","watchRemovePost","postSaga","axios","shortId","delay","put","takeLatest","all","fork","throttle","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","post","action","type","response","addPostAPI","console","log","id","generate","content","removePostAPI","addCommentAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\r\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* loadPosts(action){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(loadPostsAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : LOAD_POSTS_SUCCESS,\r\n            data : generateDummyPost(10),\r\n        });\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : LOAD_POSTS_FAILURE,\r\n            data:err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* addPost(action){\r\n    console.log('saga addPost');\r\n    console.log(action);\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data:id,\r\n        });\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* removePost(action){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : action.data\r\n        }); //post reducer 상태 바꾸기\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        }); //user reducer 상태 바꾸기\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : REMOVE_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data){\r\n    return axios.post('/api/comment',data)\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    }catch(err){\r\n        yield put ({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadPosts(){\r\n    yield throttle(2000,LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost(){\r\n    console.log('watchAddPost');\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddCommentPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}