{"ast":null,"code":"import { all, delay, put, fork, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction followAPI() {\n  return axios.follow('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.unfollow('/api/unfollow');\n}\n\nfunction* unfollow() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn');\n    yield delay(1000);\n    /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\n    // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); //result = yield call(logOutAPI)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.signup('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n  /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n      yield take('LOG_IN_REQUEST', logIn);\r\n    } */\n  // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\n  // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\n  //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\n  //LOG_IN 액션이 실행되면 logIn 함수 실행해라\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","put","fork","takeLatest","axios","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","followAPI","follow","action","type","data","err","error","response","unfollowAPI","unfollow","logInAPI","post","logIn","console","log","logOutAPI","logOut","signUpAPI","signup","signUp","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import {all, delay, put, fork, takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, \r\n    UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, \r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS,} from '../reducers/user';\r\nfunction followAPI(){\r\n    return axios.follow('/api/follow')\r\n}\r\nfunction* follow(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : FOLLOW_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type : FOLLOW_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction unfollowAPI(){\r\n    return axios.unfollow('/api/unfollow')\r\n}\r\nfunction* unfollow(){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : UNFOLLOW_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type : UNFOLLOW_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data)\r\n}\r\nfunction* logIn(action){\r\n    try{\r\n        console.log('saga logIn');\r\n        yield delay(1000); /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\r\n        // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : LOG_IN_FAILURE,\r\n            error :err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\nfunction* logOut(){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(logOutAPI)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : LOG_OUT_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(){\r\n    return axios.signup('/api/signup')\r\n}\r\nfunction* signUp(){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n    \r\n}function* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n    \r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn); \r\n    /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n        yield take('LOG_IN_REQUEST', logIn);\r\n\r\n    } */\r\n    // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\r\n    // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\r\n    //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\r\n    //LOG_IN 액션이 실행되면 logIn 함수 실행해라\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n    \r\n}\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}