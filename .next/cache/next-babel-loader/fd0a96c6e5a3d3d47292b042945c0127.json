{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevtools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\n\nvar configureStore = function configureStore() {\n  var middlewares = [];\n  var enhancer = process.env.Node_ENV === 'production' ? compose.apply(void 0, middlewares) : composeWithDevtools.apply(void 0, middlewares);\n  {\n    /*배포용일때는 devtools 연결 X, 용량 차지 때문에\r\n    하지만 개발자용일때는 devtools를 연결해서 history가 쌓이게 한다\r\n    배포용일때는 history를 쌓아두지 않고 계속 버림 */\n  }\n  var store = createStore(reducer);\n  store.dispatch({\n    type: 'CHANGE_NICKNAME',\n    data: '채원'\n  });\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: process.env.Node_ENV === 'development'\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevtools","reducer","configureStore","middlewares","enhancer","process","env","Node_ENV","store","dispatch","type","data","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAK;AACxB,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAuB,YAAvB,GACXT,OAAO,MAAP,SAAWK,WAAX,CADW,GAEXH,mBAAmB,MAAnB,SAAuBG,WAAvB,CAFN;AAGA;AAAC;AACL;AACA;AAAqC;AACjC,MAAMK,KAAK,GAAGT,WAAW,CAACE,OAAD,CAAzB;AACAO,EAAAA,KAAK,CAACC,QAAN,CAAe;AACXC,IAAAA,IAAI,EAAG,iBADI;AAEXC,IAAAA,IAAI,EAAG;AAFI,GAAf;AAIA,SAAOH,KAAP;AACH,CAdD;;AAeA,IAAMI,OAAO,GAAGhB,aAAa,CAACM,cAAD,EAAiB;AAC1CW,EAAAA,KAAK,EAAGR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AADS,CAAjB,CAA7B;AAIA,eAAeK,OAAf","sourcesContent":["import {createWrapper} from 'next-redux-wrapper';\r\nimport {applyMiddleware, compose, createStore} from 'redux';\r\nimport {composeWithDevtools} from 'redux-devtools-extension'\r\nimport reducer from '../reducers'\r\n\r\nconst configureStore = () =>{\r\n    const middlewares = [];\r\n    const enhancer = process.env.Node_ENV==='production'\r\n        ? compose(...middlewares)\r\n        : composeWithDevtools(...middlewares)\r\n    {/*배포용일때는 devtools 연결 X, 용량 차지 때문에\r\n    하지만 개발자용일때는 devtools를 연결해서 history가 쌓이게 한다\r\n    배포용일때는 history를 쌓아두지 않고 계속 버림 */}\r\n    const store = createStore(reducer);\r\n    store.dispatch({\r\n        type : 'CHANGE_NICKNAME',\r\n        data : '채원',\r\n    })\r\n    return store;\r\n};\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug : process.env.Node_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}