{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\\\uC804\\uCC44\\uC774\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Avatar, Button, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './postCardContent';\nimport { REMOVE_POST_REQUEST, removePostLoading } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      liked = _useState[0],\n      setLiked = _useState[1];\n\n  var _useState2 = useState(false),\n      commentForOpened = _useState2[0],\n      setCommentForOpened = _useState2[1];\n\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n    {\n      /*true는 false로, false는 true로 */\n    }\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentForOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var id = me === null || me === void 0 ? void 0 : me.id; // === me && me.id\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 42\n      }, _this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, _this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 27\n      }, _this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 27\n      }, _this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, _this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, _this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, _this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, _this)] // extra={id && <FollowButton post={post}/>}\n      ,\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, _this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 34\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, _this), commentForOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, _this), /*#__PURE__*/_jsxDEV(List, {\n        header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: function renderItem(item) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Comment, {\n              author: item.User.nickname,\n              avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: item.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 49\n              }, _this),\n              content: item.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(PostCard, \"nB1RR/sjktzA0f8jVv7LNx6hwJ4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\n{\n  /*shape으로 더 구체적으로 적어줄 수 있다. 처음에\r\n  post : PropTypes.object.isRequired 로 간단하게 적어줄 수 있음*/\n}\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","useSelector","Card","Popover","Avatar","Button","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","PostImages","CommentForm","FollowButton","PostCardContent","REMOVE_POST_REQUEST","removePostLoading","PostCard","post","dispatch","liked","setLiked","commentForOpened","setCommentForOpened","onToggleLike","prev","onToggleComment","onRemovePost","type","data","id","state","user","me","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport {Card, Popover, Avatar, Button, List, Comment} from 'antd';\r\nimport {RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone} from '@ant-design/icons';\r\nimport {useDispatch} from 'react-redux';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport FollowButton from './FollowButton';\r\nimport PostCardContent from './postCardContent';\r\nimport {REMOVE_POST_REQUEST, removePostLoading} from '../reducers/post';\r\n\r\nconst PostCard = ({post}) => {\r\n    const dispatch = useDispatch();\r\n    const [liked, setLiked] = useState(false);\r\n    const [commentForOpened, setCommentForOpened]=useState(false);\r\n    const onToggleLike = useCallback(()=>{\r\n        setLiked((prev)=> !prev);\r\n        {/*true는 false로, false는 true로 */}\r\n    },[]);\r\n    const onToggleComment = useCallback(()=>{\r\n        setCommentForOpened((prev)=>!prev);\r\n    },[]);\r\n    const onRemovePost = useCallback(()=>{\r\n        dispatch({\r\n            type : REMOVE_POST_REQUEST,\r\n            data : post.id,\r\n        });\r\n    },[]);\r\n    const {me}= useSelector((state)=>state.user);\r\n    const id = me?.id;\r\n    // === me && me.id\r\n    return (\r\n        <div style={{marginBottom:20}}>\r\n            {/* 배열안에 jsx를 넣을때는 항상 key 붙여주기\r\n                    Popover는 ...에 손을 올렸을 때 여러가지 더보기 버튼들 */}\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images}/>}\r\n                actions = {[\r\n                    <RetweetOutlined key=\"retweet\"/>,\r\n                    liked \r\n                        ? <HeartTwoTone twoToneColor = \"#eb2f96\" key=\"heart\" onClick={onToggleLike}/>\r\n                        : <HeartOutlined key=\"heart\" onClick={onToggleLike}/>,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id === id ? (\r\n                                <>\r\n                                <Button>수정</Button>\r\n                                <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                                </>\r\n                            ) : <Button>신고</Button>}\r\n\r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined/>\r\n                    </Popover>\r\n                ]}\r\n                // extra={id && <FollowButton post={post}/>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={<PostCardContent postData={post.content}/>}\r\n                />\r\n                </Card>\r\n                {commentForOpened && (\r\n                    <div>\r\n                        <CommentForm post={post}/>\r\n                        {/*post를 보내는 이유 : 어떤 유저의 게시글에 댓글을 달건지 알아야 하기때문, id를 보내서 쓰려고*/}\r\n                        <List\r\n                            header={`${post.Comments.length}개의 댓글`}\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={post.Comments}\r\n                            renderItem={(item)=>(\r\n                                <li>\r\n                                    <Comment\r\n                                        author={item.User.nickname}\r\n                                        avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                        content={item.content}\r\n                                    />\r\n                                </li>\r\n\r\n                            )}\r\n                        />\r\n\r\n                    </div>\r\n                )}\r\n                {/*\r\n            <CommentForm/>\r\n            <Coments/>\r\n                */}\r\n        </div>\r\n    )\r\n}\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        id : PropTypes.number,\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        createAt : PropTypes.object,\r\n        Comments : PropTypes.arrayOf(PropTypes.object),\r\n        Images : PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n};\r\n{/*shape으로 더 구체적으로 적어줄 수 있다. 처음에\r\npost : PropTypes.object.isRequired 로 간단하게 적어줄 수 있음*/}\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}