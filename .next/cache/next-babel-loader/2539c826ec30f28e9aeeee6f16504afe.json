{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\\\uC804\\uCC44\\uC774\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Form, Input, Button } from 'antd';\nimport React, { useCallback, useEffect } from 'react';\nimport useInput from '../hooks/useInput';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport useSelection from 'antd/lib/table/hooks/useSelection';\nimport { setContext } from 'redux-saga/effects';\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // state.user.me && state.user.me.id\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]); //두번째 인자는 언제 해당 콜백을 실행햐야 할 지 선택할 수 있는 값\n\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        useId: id\n      }\n    });\n  }, [commentText, id]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          zIndex: 1\n        },\n        loading: addCommentLoading,\n        children: \"\\uC090\\uC57D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(CommentForm, \"VVXDIzYho1PoUPVL4T+388LRJig=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/components/CommentForm.js"],"names":["Form","Input","Button","React","useCallback","useEffect","useInput","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","useSelection","setContext","CommentForm","post","id","state","user","me","addCommentDone","dispatch","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","postId","useId","zIndex","addCommentLoading","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,SAAQA,IAAR,EAAcC,KAAd,EAAqBC,MAArB,QAAkC,MAAlC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,SAASC,mBAAT,QAAqC,kBAArC;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAY;AAAA;;AAAA,MAAVC,IAAU,QAAVA,IAAU;AAC5B,MAAMC,EAAE,GAAGP,WAAW,CAAC,UAACQ,KAAD;AAAA;;AAAA,6BAASA,KAAK,CAACC,IAAN,CAAWC,EAApB,mDAAS,eAAeH,EAAxB;AAAA,GAAD,CAAtB,CAD4B,CAE5B;;AAF4B,qBAGDP,WAAW,CAAC,UAACQ,KAAD;AAAA,WAASA,KAAK,CAACF,IAAf;AAAA,GAAD,CAHV;AAAA,MAGpBK,cAHoB,gBAGpBA,cAHoB;;AAI5B,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AAJ4B,kBAM6BH,QAAQ,CAAC,EAAD,CANrC;AAAA;AAAA,MAMrBe,WANqB;AAAA,MAMRC,mBANQ;AAAA,MAMaC,cANb;;AAQ5BlB,EAAAA,SAAS,CAAC,YAAI;AACV,QAAGc,cAAH,EAAkB;AACdI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACH;AACJ,GAJQ,EAIP,CAACJ,cAAD,CAJO,CAAT,CAR4B,CAYP;;AACrB,MAAMK,eAAe,GAAGpB,WAAW,CAAC,YAAI;AACpCgB,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAGf,mBADF;AAELgB,MAAAA,IAAI,EAAG;AAAEC,QAAAA,OAAO,EAAGN,WAAZ;AAAyBO,QAAAA,MAAM,EAAGd,IAAI,CAACC,EAAvC;AAA2Cc,QAAAA,KAAK,EAAGd;AAAnD;AAFF,KAAD,CAAR;AAIH,GALkC,EAKjC,CAACM,WAAD,EAAcN,EAAd,CALiC,CAAnC;AAMA,sBACI,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAES,eAAhB;AAAA,2BACI,QAAC,IAAD,CAAM,IAAN;AAAA,8BACI,QAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,KAAK,EAAEH,WAAvB;AAAoC,QAAA,QAAQ,EAAEC,mBAA9C;AAAmE,QAAA,IAAI,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAyC,QAAA,KAAK,EAAE;AAACQ,UAAAA,MAAM,EAAC;AAAR,SAAhD;AAA4D,QAAA,OAAO,EAAEC,iBAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAUH,CA7BD;;GAAMlB,W;UACSL,W,EAEgBA,W,EACVC,W,EAEwCH,Q;;;KANvDO,W;AA8BNA,WAAW,CAACmB,SAAZ,GAAsB;AAClBlB,EAAAA,IAAI,EAACP,SAAS,CAAC0B,MAAV,CAAiBC;AADJ,CAAtB;AAGA,eAAerB,WAAf","sourcesContent":["import {Form, Input, Button} from 'antd';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport useInput from '../hooks/useInput';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport { ADD_COMMENT_REQUEST }  from '../reducers/post';\r\nimport useSelection from 'antd/lib/table/hooks/useSelection';\r\nimport { setContext } from 'redux-saga/effects';\r\n\r\nconst CommentForm = ({post}) => {\r\n    const id = useSelector((state)=>state.user.me?.id);\r\n    // state.user.me && state.user.me.id\r\n    const { addCommentDone } = useSelector((state)=>state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const [commentText, onChangeCommentText, setCommentText]=useInput('');\r\n\r\n    useEffect(()=>{\r\n        if(addCommentDone){\r\n            setCommentText('');\r\n        }\r\n    },[addCommentDone]); //두번째 인자는 언제 해당 콜백을 실행햐야 할 지 선택할 수 있는 값\r\n    const onSubmitComment = useCallback(()=>{\r\n        dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : { content : commentText, postId : post.id, useId : id }\r\n        })\r\n    },[commentText, id]);\r\n    return(\r\n        <Form onFinish={onSubmitComment}>\r\n            <Form.Item>\r\n                <Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4}/>\r\n                <Button type=\"primary\" htmlType=\"submit\" style={{zIndex:1}} loading={addCommentLoading}>\r\n                    삐약\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\nCommentForm.propTypes={\r\n    post:PropTypes.object.isRequired,\r\n}\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}