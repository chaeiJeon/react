{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('saga ligIn');\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            //put=dispatch 라고 생각하기, 액션 객체 dispatch\n            type: 'LOG_IN_FAILURE',\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            //put=dispatch 라고 생각하기, 액션 객체 dispatch\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","delay","fork","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","logInAPI","data","post","action","console","log","put","type","error","response","logOutAPI","result"],"mappings":";;oDAOUA,K;qDAqBAC,M;qDAkBAC,U;qDAWAC,W;qDAKeC,Q;;AA9DzB,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,UAA1B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,eAAxD,EAAyEC,eAAzE,EAA0FC,eAA1F,QAAgH,kBAAhH;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOR,KAAK,CAACS,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,SAAUjB,KAAV,CAAgBmB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAFR;AAGQ,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAMQ,iBAAMgB,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAG,gBADD;AAENN,YAAAA,IAAI,EAAGE,MAAM,CAACF;AAFR,WAAD,CAAT;;AANR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWQ,iBAAMK,GAAG,CAAC;AAAE;AACRC,YAAAA,IAAI,EAAG,gBADD;AAENC,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAASS,SAAT,GAAoB;AAChB,SAAOjB,KAAK,CAACS,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,SAAUjB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAKQ,iBAAMgB,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAG,iBADD;AAENN,YAAAA,IAAI,EAAGU,MAAM,CAACV;AAFR,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMK,GAAG,CAAC;AAAE;AACRC,YAAAA,IAAI,EAAG,iBADD;AAENN,YAAAA,IAAI,EAAC,aAAIQ,QAAJ,CAAaR;AAFZ,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,gBAAD,EAAkBR,KAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,iBAAD,EAAoBP,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, delay, fork, takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE} from '../reducers/user';\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data)\r\n}\r\nfunction* logIn(action){\r\n    try{\r\n        console.log('saga ligIn');\r\n        yield delay(1000); /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\r\n        // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : 'LOG_IN_FAILURE',\r\n            error :err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\nfunction* logOut(){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(logOutAPI)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : 'LOG_OUT_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : 'LOG_OUT_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST',logIn); \r\n    /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n        yield take('LOG_IN_REQUEST', logIn);\r\n\r\n    } */\r\n    // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\r\n    // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\r\n    //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\r\n    //LOG_IN 액션이 실행되면 logIn 함수 실행해라\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n    \r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}