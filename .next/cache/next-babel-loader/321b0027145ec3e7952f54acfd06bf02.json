{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\nconst initialState = {\n  user: {},\n  post: {}\n};\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; // data만 적혀있는데 원래는 data:data 이다\n// 이전상태와 액션을 활용해서 다음상태를 만든다\n\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  //HYDRATE(server side rendering을 위해 사용)를 위한 reducer 추가\n  user,\n  post //user,post combine\n\n}); // reducer가 함수이기 때문에, 함수끼리 합치려면 combineReducer의 도움을 받아야함\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","changeNickname","data","type","rootReducer","index","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAyB,oBAAzB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAG,EADU;AAGjBC,EAAAA,IAAI,EAAG;AAHU,CAArB;;AASA,MAAME,cAAc,GAAKC,IAAF,IAAY;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAG,iBADJ;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD,C,CAMA;AAGA;;;AACA,MAAME,WAAW,GAAGP,eAAe,CAAC;AAChCQ,EAAAA,KAAK,EAAG,CAAEC,KAAK,GAAG,EAAV,EAAcC,MAAd,KAAwB;AAC5B,YAAOA,MAAM,CAACJ,IAAd;AACI,WAAKP,OAAL;AACI,+CAAYU,KAAZ,GAAsBC,MAAM,CAACC,OAA7B;;AACR;AACI,eAAOF,KAAP;AAJJ;AAMH,GAR+B;AAShC;AACAR,EAAAA,IAVgC;AAWhCC,EAAAA,IAXgC,CAYhC;;AAZgC,CAAD,CAAnC,C,CAcA;;AACA,eAAeK,WAAf","sourcesContent":["import { HYDRATE }  from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport post from './post';\r\n\r\nconst initialState = {\r\n    user : {\r\n    },\r\n    post : {\r\n    }\r\n};\r\n\r\n\r\n\r\nconst changeNickname = ( data ) => {\r\n    return {\r\n        type : 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n};\r\n// data만 적혀있는데 원래는 data:data 이다\r\n\r\n\r\n// 이전상태와 액션을 활용해서 다음상태를 만든다\r\nconst rootReducer = combineReducers({\r\n    index : ( state = {}, action )=>{\r\n        switch(action.type){\r\n            case HYDRATE :\r\n                return { ...state, ...action.payload }\r\n        default:\r\n            return state;\r\n        }\r\n    },\r\n    //HYDRATE(server side rendering을 위해 사용)를 위한 reducer 추가\r\n    user,\r\n    post,\r\n    //user,post combine\r\n});\r\n// reducer가 함수이기 때문에, 함수끼리 합치려면 combineReducer의 도움을 받아야함\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}