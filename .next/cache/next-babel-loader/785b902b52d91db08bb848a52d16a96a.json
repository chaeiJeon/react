{"ast":null,"code":"import axios from 'axios';\nimport shortId from 'shortid';\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000); //result = yield call(loadPostsAPI, action.data)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  console.log('saga addPost');\n  console.log(action);\n\n  try {\n    yield delay(1000); //result = yield call(addPostAPI, action.data)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); //result = yield call(addPostAPI, action.data)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); //post reducer 상태 바꾸기\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); //user reducer 상태 바꾸기\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  console.log('watchAddPost');\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddCommentPost)]);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/post.js"],"names":["axios","shortId","delay","put","takeLatest","all","fork","throttle","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","post","loadPosts","action","type","err","response","addPostAPI","addPost","console","log","id","generate","content","removePostAPI","removePost","addCommentAPI","addComment","watchLoadPosts","watchAddPost","watchAddCommentPost","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\r\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* loadPosts(action){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(loadPostsAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : LOAD_POSTS_SUCCESS,\r\n            data : generateDummyPost(10),\r\n        });\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : LOAD_POSTS_FAILURE,\r\n            data:err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* addPost(action){\r\n    console.log('saga addPost');\r\n    console.log(action);\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data:id,\r\n        });\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* removePost(action){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : action.data\r\n        }); //post reducer 상태 바꾸기\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        }); //user reducer 상태 바꾸기\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : REMOVE_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data){\r\n    return axios.post('/api/comment',data)\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    }catch(err){\r\n        yield put ({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadPosts(){\r\n    yield throttle(2000,LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost(){\r\n    console.log('watchAddPost');\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddCommentPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}