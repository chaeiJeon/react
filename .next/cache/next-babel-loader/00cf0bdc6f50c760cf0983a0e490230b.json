{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uC804\\uCC44\\uC774\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { Card, Popover, Avatar, Button, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './postCardContent';\n\nconst PostCard = ({\n  post\n}) => {\n  console.log('--f');\n  console.log(post);\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentForOpened,\n    1: setCommentForOpened\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n    {\n      /*true는 false로, false는 true로 */\n    }\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentForOpened(prev => !prev);\n  }, []);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const id = me === null || me === void 0 ? void 0 : me.id; // === me && me.id\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 42\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)] // extra={id && <FollowButton post={post}/>}\n      ,\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), commentForOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: item.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 49\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\n{\n  /*shape으로 더 구체적으로 적어줄 수 있다. 처음에\r\n  post : PropTypes.object.isRequired 로 간단하게 적어줄 수 있음*/\n}\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","useSelector","Card","Popover","Avatar","Button","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostImages","CommentForm","FollowButton","PostCardContent","PostCard","post","console","log","liked","setLiked","commentForOpened","setCommentForOpened","onToggleLike","prev","onToggleComment","me","state","user","id","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector} from 'react-redux';\r\nimport {Card, Popover, Avatar, Button, List, Comment} from 'antd';\r\nimport {RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone} from '@ant-design/icons';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport FollowButton from './FollowButton';\r\nimport PostCardContent from './postCardContent'\r\nconst PostCard = ({post}) => {\r\n    console.log('--f');\r\n    console.log(post);\r\n    const [liked, setLiked] = useState(false);\r\n    const [commentForOpened, setCommentForOpened]=useState(false);\r\n    const onToggleLike = useCallback(()=>{\r\n        setLiked((prev)=> !prev);\r\n        {/*true는 false로, false는 true로 */}\r\n    },[]);\r\n    const onToggleComment = useCallback(()=>{\r\n        setCommentForOpened((prev)=>!prev);\r\n    },[]);\r\n    const {me}= useSelector((state)=>state.user);\r\n    const id = me?.id;\r\n    // === me && me.id\r\n    return (\r\n        <div style={{marginBottom:20}}>\r\n            \r\n            {/* 배열안에 jsx를 넣을때는 항상 key 붙여주기\r\n                    Popover는 ...에 손을 올렸을 때 여러가지 더보기 버튼들 */}\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images}/>}\r\n                actions = {[\r\n                    <RetweetOutlined key=\"retweet\"/>,\r\n                    liked \r\n                        ? <HeartTwoTone twoToneColor = \"#eb2f96\" key=\"heart\" onClick={onToggleLike}/>\r\n                        : <HeartOutlined key=\"heart\" onClick={onToggleLike}/>,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.User.id === id ? (\r\n                                <>\r\n                                <Button>수정</Button>\r\n                                <Button type=\"danger\">삭제</Button>\r\n                                </>\r\n                            ) : <Button>신고</Button>}\r\n\r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined/>\r\n                    </Popover>\r\n                ]}\r\n                // extra={id && <FollowButton post={post}/>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    title={post.User.nickname}\r\n                    description={<PostCardContent postData={post.content}/>}\r\n                />\r\n                </Card>\r\n                {commentForOpened && (\r\n                    <div>\r\n                        <CommentForm post={post}/>\r\n                        {/*post를 보내는 이유 : 어떤 유저의 게시글에 댓글을 달건지 알아야 하기때문, id를 보내서 쓰려고*/}\r\n                        <List\r\n                            header={`${post.Comments.length}개의 댓글`}\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={post.Comments}\r\n                            renderItem={(item)=>(\r\n                                <li>\r\n                                    <Comment\r\n                                        author={item.User.nickname}\r\n                                        avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                        content={item.content}\r\n                                    />\r\n                                </li>\r\n\r\n                            )}\r\n                        />\r\n\r\n                    </div>\r\n                )}\r\n                {/*\r\n            <CommentForm/>\r\n            <Coments/>\r\n                */}\r\n        </div>\r\n    )\r\n}\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        id : PropTypes.number,\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        createAt : PropTypes.object,\r\n        Comments : PropTypes.arrayOf(PropTypes.object),\r\n        Images : PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n};\r\n{/*shape으로 더 구체적으로 적어줄 수 있다. 처음에\r\npost : PropTypes.object.isRequired 로 간단하게 적어줄 수 있음*/}\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}