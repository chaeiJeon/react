{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddCommentPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('saga addPost');\n          console.log(action);\n          _context.prev = 2;\n          _context.next = 5;\n          return delay(1000);\n\n        case 5:\n          //result = yield call(addPostAPI, action.data)\n          // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n          id = shortId.generate();\n          _context.next = 8;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 16;\n          return put({\n            //put=dispatch 라고 생각하기, 액션 객체 dispatch\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 12]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('watchAddPost');\n          _context3.next = 3;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddCommentPost() {\n  return _regeneratorRuntime.wrap(function watchAddCommentPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddCommentPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddCommentPost","postSaga","axios","shortId","delay","put","takeLatest","all","fork","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","action","console","log","id","generate","type","content","response","addCommentAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport shortId from 'shortid';\r\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_TO_ME } from '../reducers/post';\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* addPost(action){\r\n    console.log('saga addPost');\r\n    console.log(action);\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : {\r\n                id,\r\n                content : action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type : ADD_POST_TO_ME,\r\n            data:id,\r\n        });\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data){\r\n    return axios.post('/api/comment',data)\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : action.data,\r\n        });\r\n    }catch(err){\r\n        yield put ({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    console.log('watchAddPost');\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddCommentPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}