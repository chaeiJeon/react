{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork } from 'redux-saga/effects';\nimport postSaga from './post';\nimport userSaga from './user';\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(postSaga), fork(userSaga) //saga는 combinereducer 필요없음\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/index.js"],"names":["rootSaga","all","fork","postSaga","userSaga"],"mappings":";;oDAKyBA,Q;;AALzB,SAAQC,GAAR,EAAaC,IAAb,QAAwB,oBAAxB;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,eAAe,SAAUJ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAOZ,iBAAMC,GAAG,CACL,CACAC,IAAI,CAACC,QAAD,CADJ,EAEAD,IAAI,CAACE,QAAD,CAFJ,CAGA;AAHA,WADK,CAAT;;AAPY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork} from 'redux-saga/effects';\r\n\r\nimport postSaga from './post';\r\nimport userSaga from './user';\r\n\r\nexport default function* rootSaga() {\r\n    /* *=generator 문법 자체가 이렇게 생김(saga에서) \r\n    generator는 함수이름.next() 뒤에 넥스트를 써주어야 한다 \r\n    generator함수는 안에 yield를 넣어주면 거기서 멈춤, 그리고 또 호출하면 멈춘곳에서부터\r\n    다시 시작하고 또 yield가 있으면 멈춤, 또 호출하면 멈춘곳에서부터 시작 \r\n    */\r\n   // 굳이 yield를 적는 이유는 한줄 한줄 실행해 볼 수 있기 때문에\r\n   yield all(\r\n       [\r\n       fork(postSaga),\r\n       fork(userSaga),\r\n       //saga는 combinereducer 필요없음\r\n   ]);\r\n   // all은 배열을 받아서 배열 안에 있는 것을 한번에 실행해준다\r\n   // fork는 함수를 실행한다는 뜻\r\n   // fork 대신 call도 쓰지만 둘의 차이점이 있음\r\n   // fork는 비동기 함수호출, call은 동기 함수호출\r\n   /* call은 10번째 줄에서 loginAPI가 리턴할 때 까지 기다림\r\n    비동기는 요청을 기다리지 않고 바로 다음꺼 실행 */\r\n}"]},"metadata":{},"sourceType":"module"}