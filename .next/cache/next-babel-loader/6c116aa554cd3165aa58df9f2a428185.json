{"ast":null,"code":"import { all, delay, fork, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga ligIn');\n    yield delay(1000);\n    /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\n    // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: 'LOG_IN_FAILURE',\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); //result = yield call(logOutAPI)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n  /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n      yield take('LOG_IN_REQUEST', logIn);\r\n    } */\n  // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\n  // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\n  //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\n  //LOG_IN 액션이 실행되면 logIn 함수 실행해라\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","fork","takeLatest","axios","logInAPI","data","post","logIn","action","console","log","put","type","err","error","response","logOutAPI","logOut","result","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,UAA1B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AAAmB;AACnB;AACA;;AACA,UAAMW,GAAG,CAAC;AACNC,MAAAA,IAAI,EAAG,gBADD;AAENP,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GATD,CASE,OAAMQ,GAAN,EAAU;AAAE;AACV,UAAMF,GAAG,CAAC;AAAE;AACRC,MAAAA,IAAI,EAAG,gBADD;AAENE,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,SAAT,GAAoB;AAChB,SAAOb,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,UAAUW,MAAV,GAAkB;AACd,MAAG;AACC,UAAMjB,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;AACA;;AACA,UAAMW,GAAG,CAAC;AACNC,MAAAA,IAAI,EAAG,iBADD;AAENP,MAAAA,IAAI,EAAGa,MAAM,CAACb;AAFR,KAAD,CAAT;AAIH,GARD,CAQE,OAAMQ,GAAN,EAAU;AAAE;AACV,UAAMF,GAAG,CAAC;AAAE;AACRC,MAAAA,IAAI,EAAG,iBADD;AAENP,MAAAA,IAAI,EAACQ,GAAG,CAACE,QAAJ,CAAaV;AAFZ,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUc,UAAV,GAAsB;AAClB,QAAMjB,UAAU,CAAC,gBAAD,EAAkBK,KAAlB,CAAhB;AACA;AACJ;AACA;AAEI;AACA;AACA;AACA;AACH;;AACD,UAAUa,WAAV,GAAuB;AACnB,QAAMlB,UAAU,CAAC,iBAAD,EAAoBe,MAApB,CAAhB;AAEH;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMtB,GAAG,CAAC,CACNE,IAAI,CAACkB,UAAD,CADE,EAENlB,IAAI,CAACmB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all, delay, fork, takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data)\r\n}\r\nfunction* logIn(action){\r\n    try{\r\n        console.log('saga ligIn');\r\n        yield delay(1000); /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\r\n        // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : 'LOG_IN_SUCCESS',\r\n            data : action.data,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : 'LOG_IN_FAILURE',\r\n            error :err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\nfunction* logOut(){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(logOutAPI)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : 'LOG_OUT_SUCCESS',\r\n            data : result.data\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : 'LOG_OUT_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST',logIn); \r\n    /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n        yield take('LOG_IN_REQUEST', logIn);\r\n\r\n    } */\r\n    // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\r\n    // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\r\n    //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\r\n    //LOG_IN 액션이 실행되면 logIn 함수 실행해라\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n    \r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}