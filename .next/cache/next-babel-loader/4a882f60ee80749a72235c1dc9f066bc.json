{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); //result = yield call(addPostAPI, action.data)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/post.js"],"names":["axios","delay","put","takeLatest","all","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","data","post","addPost","action","type","err","response","addCommentAPI","addComment","result","watchAddPost","watchAddCommentPost","postSaga","watchAddComment"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACQC,mBADR,EAC6BC,mBAD7B,EACkDC,mBADlD,QAC6E,kBAD7E;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOb,KAAK,CAACc,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AACD,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMf,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;AACA;;AACA,UAAMC,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAGV,gBADD;AAENM,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GARD,CAQE,OAAMK,GAAN,EAAU;AAAE;AACV,UAAMhB,GAAG,CAAC;AAAE;AACRe,MAAAA,IAAI,EAAGT,gBADD;AAENK,MAAAA,IAAI,EAACK,GAAG,CAACC,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAIH;AACJ;;AACD,SAASO,aAAT,CAAuBP,IAAvB,EAA4B;AACxB,SAAOb,KAAK,CAACc,IAAN,CAAW,cAAX,EAA0BD,IAA1B,CAAP;AACH;;AACD,UAAUQ,UAAV,CAAqBL,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAGP,mBADD;AAENG,MAAAA,IAAI,EAAGS,MAAM,CAACT;AAFR,KAAD,CAAT;AAIH,GAND,CAMC,OAAMK,GAAN,EAAU;AACP,UAAMhB,GAAG,CAAE;AACPe,MAAAA,IAAI,EAAGN,mBADA;AAEPE,MAAAA,IAAI,EAAGK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAF,CAAT;AAIH;AACJ;;AAGD,UAAUU,YAAV,GAAwB;AACpB,QAAMpB,UAAU,CAACG,gBAAD,EAAmBS,OAAnB,CAAhB;AACH;;AACD,UAAUS,mBAAV,GAA+B;AAC3B,QAAMrB,UAAU,CAACM,mBAAD,EAAsBY,UAAtB,CAAhB;AACH;;AACD,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMrB,GAAG,CAAC,CACNC,IAAI,CAACkB,YAAD,CADE,EAENlB,IAAI,CAACqB,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* addPost(action){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data){\r\n    return axios.post('/api/comment',data)\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : result.data,\r\n        })\r\n    }catch(err){\r\n        yield put ({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); \r\n}\r\nfunction* watchAddCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}