{"ast":null,"code":"import { all, delay, put, fork, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn');\n    yield delay(1000);\n    /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\n    // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); //result = yield call(logOutAPI)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.signup('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n  /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n      yield take('LOG_IN_REQUEST', logIn);\r\n    } */\n  // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\n  // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\n  //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\n  //LOG_IN 액션이 실행되면 logIn 함수 실행해라\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","put","fork","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signup","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EACIC,eADJ,EACqBC,eADrB,EACsCC,eADtC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,QAE6D,kBAF7D;;AAIA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AAAmB;AACnB;AACA;;AACA,UAAMC,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGf,cADD;AAENS,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFR,KAAD,CAAT;AAIH,GATD,CASE,OAAMO,GAAN,EAAU;AAAE;AACV,UAAMrB,GAAG,CAAC;AAAE;AACRoB,MAAAA,IAAI,EAAGd,cADD;AAENgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,SAAT,GAAoB;AAChB,SAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,UAAUU,MAAV,GAAkB;AACd,MAAG;AACC,UAAM1B,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;AACA;;AACA,UAAMC,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGZ;AADD,KAAD,CAAT;AAGH,GAPD,CAOE,OAAMa,GAAN,EAAU;AAAE;AACV,UAAMrB,GAAG,CAAC;AAAE;AACRoB,MAAAA,IAAI,EAAGX,eADD;AAENa,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASY,SAAT,GAAoB;AAChB,SAAOvB,KAAK,CAACwB,MAAN,CAAa,aAAb,CAAP;AACH;;AACD,UAAUC,MAAV,GAAkB;AACd,MAAG;AACC,UAAM7B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGR;AADD,KAAD,CAAT;AAGH,GALD,CAKC,OAAMS,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAGV,eADD;AAENY,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaT;AAFf,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUe,UAAV,GAAsB;AAClB,QAAM3B,UAAU,CAACE,cAAD,EAAgBY,KAAhB,CAAhB;AACA;AACJ;AACA;AAEI;AACA;AACA;AACA;AACH;;AACD,UAAUc,WAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACK,eAAD,EAAkBkB,MAAlB,CAAhB;AAEH;;AACD,UAAUM,WAAV,GAAuB;AACnB,QAAM7B,UAAU,CAACS,eAAD,EAAkBiB,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMlC,GAAG,CAAC,CACNG,IAAI,CAAC4B,UAAD,CADE,EAEN5B,IAAI,CAAC6B,WAAD,CAFE,EAGN7B,IAAI,CAAC8B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all, delay, put, fork, takeLatest} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS,} from '../reducers/user';\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data)\r\n}\r\nfunction* logIn(action){\r\n    try{\r\n        console.log('saga logIn');\r\n        yield delay(1000); /* result = yield call(logInAPI, action.data) 아직은 서버가 없으니*/\r\n        // call의 첫번째 인자는 함수명, 그다음부터는 매개변수들\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : action.data,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : LOG_IN_FAILURE,\r\n            error :err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\nfunction* logOut(){\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(logOutAPI)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n        })\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : LOG_OUT_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(){\r\n    return axios.signup('/api/signup')\r\n}\r\nfunction* signUp(){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn); \r\n    /* while(true){ //while로 감싸줘야 로그인하고 로그아웃하고 또 로그인 가능, while로 안감싸주면 로그인 딱 한번만 가능\r\n        yield take('LOG_IN_REQUEST', logIn);\r\n\r\n    } */\r\n    // takeEvery는 while과 같은 역할, while이 직관적이지 않아서 사용\r\n    // takeLatest는 예를들어 실수로 글올리기 버튼을 두번 눌렀을 때 둘다 로딩중이라면 마지막으로 누른것에만 반응, takeEvery에서는 두번 올린게 됨(즉각반응)\r\n    //take는 LOG_IN이라는 액션이 실행될 때까지 기다리겠다는 뜻\r\n    //LOG_IN 액션이 실행되면 logIn 함수 실행해라\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n    \r\n}\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}