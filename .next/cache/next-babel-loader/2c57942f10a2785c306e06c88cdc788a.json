{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\uC804\\uCC44\\uC774\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    //스크롤해서 끝까지 갔을 때 10개를 더 보여주게함\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        // 끝에서 300비트 보다 더 많이 스크롤을 내렸으면\n        if (hasMorePost && !loadPostsLoading) {\n          // 로딩이 아닐때 보내줘야 여러번 REQUEST되는 것을 막을 수 있다. scroll을 막 내리면\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll); //이렇게 remove해줘야함 아니면 계속 쌓인다\n    };\n  }, [hasMorePost, loadPostsLoading]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePost","loadPostsLoading","post","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;;AAEA,MAAMC,IAAI,GAAG,MAAK;AACd,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA;AAA1B,MAA+Cb,WAAW,CAAES,KAAD,IAAUA,KAAK,CAACK,IAAjB,CAAhE;AACAf,EAAAA,SAAS,CAAC,MAAI;AACVQ,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAGV;AADF,KAAD,CAAR;AAGH,GAJQ,EAIP,EAJO,CAAT;AAKAN,EAAAA,SAAS,CAAC,MAAI;AAAE;AACZ,aAASiB,QAAT,GAAoB;AAChB,UAAGC,MAAM,CAACC,OAAP,GAAeC,QAAQ,CAACC,eAAT,CAAyBC,YAAxC,GAAuDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAsC,GAAhG,EAAoG;AACpG;AACI,YAAGV,WAAW,IAAI,CAACC,gBAAnB,EAAoC;AAAE;AAClCN,UAAAA,QAAQ,CAAC;AACLQ,YAAAA,IAAI,EAAGV;AADF,WAAD,CAAR;AAGH;AACJ;AACJ;;AACDY,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAiCP,QAAjC;AACA,WAAM,MAAI;AACNC,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAoCR,QAApC,EADM,CACwC;AACjD,KAFD;AAGH,GAfQ,EAeP,CAACJ,WAAD,EAAcC,gBAAd,CAfO,CAAT;AAkBA,sBACI,QAAC,SAAD;AAAA,eACKL,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADX,EAEKG,SAAS,CAACc,GAAV,CAAeX,IAAD,iBACX,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACY,EAApB;AAAA;AAAA;AAAA;AAAA,YADH,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAnCD;;AAoCA,eAAepB,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport {LOAD_POSTS_REQUEST} from '../reducers/post';\r\n\r\nconst Home = () =>{\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, hasMorePost, loadPostsLoading } = useSelector((state)=> state.post);\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type : LOAD_POSTS_REQUEST,\r\n        });\r\n    },[]);\r\n    useEffect(()=>{ //스크롤해서 끝까지 갔을 때 10개를 더 보여주게함\r\n        function onScroll() {\r\n            if(window.scrollY+document.documentElement.clientHeight > document.documentElement.scrollHeight-300){\r\n            // 끝에서 300비트 보다 더 많이 스크롤을 내렸으면\r\n                if(hasMorePost && !loadPostsLoading){ // 로딩이 아닐때 보내줘야 여러번 REQUEST되는 것을 막을 수 있다. scroll을 막 내리면\r\n                    dispatch({\r\n                        type : LOAD_POSTS_REQUEST,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll',onScroll)\r\n        return()=>{\r\n            window.removeEventListener('scroll',onScroll);//이렇게 remove해줘야함 아니면 계속 쌓인다\r\n        };\r\n    },[hasMorePost, loadPostsLoading]);\r\n    \r\n    \r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post)=>(\r\n                <PostCard key={post.id} post={post}/>\r\n            ))}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}