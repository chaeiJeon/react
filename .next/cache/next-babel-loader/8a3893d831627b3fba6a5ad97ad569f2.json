{"ast":null,"code":"import axios from 'axios';\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  console.log('saga addPost');\n\n  try {\n    yield delay(1000); //result = yield call(addPostAPI, action.data)\n    // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      content: action.data\n    });\n  } catch (err) {\n    //서버 요청 실패시\n    yield put({\n      //put=dispatch 라고 생각하기, 액션 객체 dispatch\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  console.log('watchAddPost');\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddCommentPost)]);\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/post.js"],"names":["axios","delay","put","takeLatest","all","fork","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","data","post","addPost","action","console","log","type","content","err","response","addCommentAPI","addComment","result","watchAddPost","watchAddCommentPost","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4CC,QAA5C,QAA4D,oBAA5D;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACQC,mBADR,EAC6BC,mBAD7B,EACkDC,mBADlD,QAC6E,kBAD7E;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOd,KAAK,CAACe,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AACD,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,MAAG;AACC,UAAMlB,KAAK,CAAC,IAAD,CAAX,CADD,CAEC;AACA;;AACA,UAAMC,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGZ,gBADD;AAENa,MAAAA,OAAO,EAAGJ,MAAM,CAACH;AAFX,KAAD,CAAT;AAIH,GARD,CAQE,OAAMQ,GAAN,EAAU;AAAE;AACV,UAAMpB,GAAG,CAAC;AAAE;AACRkB,MAAAA,IAAI,EAAGX,gBADD;AAENK,MAAAA,IAAI,EAACQ,GAAG,CAACC,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAIH;AACJ;;AACD,SAASU,aAAT,CAAuBV,IAAvB,EAA4B;AACxB,SAAOd,KAAK,CAACe,IAAN,CAAW,cAAX,EAA0BD,IAA1B,CAAP;AACH;;AACD,UAAUW,UAAV,CAAqBR,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGT,mBADD;AAENG,MAAAA,IAAI,EAAGY,MAAM,CAACZ;AAFR,KAAD,CAAT;AAIH,GAND,CAMC,OAAMQ,GAAN,EAAU;AACP,UAAMpB,GAAG,CAAE;AACPkB,MAAAA,IAAI,EAAGR,mBADA;AAEPE,MAAAA,IAAI,EAAGQ,GAAG,CAACC,QAAJ,CAAaT;AAFb,KAAF,CAAT;AAIH;AACJ;;AAGD,UAAUa,YAAV,GAAwB;AACpBT,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMhB,UAAU,CAACI,gBAAD,EAAmBS,OAAnB,CAAhB;AACH;;AACD,UAAUY,mBAAV,GAA+B;AAC3B,QAAMzB,UAAU,CAACO,mBAAD,EAAsBe,UAAtB,CAAhB;AACH;;AACD,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMzB,GAAG,CAAC,CACNC,IAAI,CAACsB,YAAD,CADE,EAENtB,IAAI,CAACuB,mBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import axios from 'axios';\r\nimport { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n        ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data)\r\n}\r\nfunction* addPost(action){\r\n    console.log('saga addPost');\r\n    try{\r\n        yield delay(1000);\r\n        //result = yield call(addPostAPI, action.data)\r\n        // 만약 서버로 로그인하는 요청을 보냈으면 그 결과를 받는 것\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            content : action.data,\r\n        });\r\n    } catch(err){ //서버 요청 실패시\r\n        yield put({ //put=dispatch 라고 생각하기, 액션 객체 dispatch\r\n            type : ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data){\r\n    return axios.post('/api/comment',data)\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : result.data,\r\n        })\r\n    }catch(err){\r\n        yield put ({\r\n            type : ADD_COMMENT_FAILURE,\r\n            data : err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    console.log('watchAddPost');\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); \r\n}\r\nfunction* watchAddCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddCommentPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}