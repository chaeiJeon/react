{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  postAdded: false,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(20).fill().map(function (v, i) {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport var UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport var UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // ACTION이름을 상수로 빼준 이유 : 중간에 오타를 막기 위해(변수로 지정하면 오타나면 오류가 난다)\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'codl'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: 1,\n      nickname: 'hal'\n    },\n    content: data\n  };\n};\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = state.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.mainPosts;\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n\n      default:\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","postAdded","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","state","action","draft","unshift","error","filter","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    postAdded: false,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n};\r\nexport const generateDummyPost = (number) => Array(20).fill().map((v, i)=>({\r\n    id : shortId.generate(),\r\n    User : {\r\n        id : shortId.generate(),\r\n        nickname : faker.name.findName(),\r\n    },\r\n    content : faker.lorem.paragraph(),\r\n    Images : [{\r\n        src : faker.image.image(),\r\n    }],\r\n    Comments : [{\r\n        User : {\r\n            id : shortId.generate(),\r\n            nickname : faker.name.findName(),\r\n        },\r\n        content : faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\r\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\r\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\r\n\r\n\r\n// ACTION이름을 상수로 빼준 이유 : 중간에 오타를 막기 위해(변수로 지정하면 오타나면 오류가 난다)\r\nexport const addPost= (data) => ({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\nexport const addComment= (data) => ({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content : data.content,\r\n    User : {\r\n        id:1,\r\n        nickname : 'codl',\r\n    },\r\n    Images : [],\r\n    Comments : [],\r\n});\r\nconst dummyComment = (data) =>({\r\n    id : shortId.generate(),\r\n    User : {\r\n        id : 1,\r\n        nickname : 'hal'\r\n    },\r\n    content : data,\r\n})\r\n\r\nexport default (state=initialState, action)=> produce(state,(draft)=>{\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone=false;\r\n                draft.addPostError=null;\r\n                break;\r\n        case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n        case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n        case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n        case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = state.mainPosts.filter((v)=>v.id !== action.data);\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n        case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n        case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n        case ADD_COMMENT_SUCCESS: \r\n                const post = draft.mainPosts.find((v)=>v.id===action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone= true;\r\n                break;\r\n        case ADD_COMMENT_REQUEST : \r\n                draft.mainPosts;\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n        case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n        default : \r\n            break;\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}