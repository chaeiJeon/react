{"ast":null,"code":"import { all, fork } from 'redux-saga/effects';\nimport postSaga from './post';\nimport userSaga from './user';\nexport default function* rootSaga() {\n  /* *=generator 문법 자체가 이렇게 생김(saga에서) \r\n  generator는 함수이름.next() 뒤에 넥스트를 써주어야 한다 \r\n  generator함수는 안에 yield를 넣어주면 거기서 멈춤, 그리고 또 호출하면 멈춘곳에서부터\r\n  다시 시작하고 또 yield가 있으면 멈춤, 또 호출하면 멈춘곳에서부터 시작 \r\n  */\n  // 굳이 yield를 적는 이유는 한줄 한줄 실행해 볼 수 있기 때문에\n  yield all([fork(postSaga), fork(userSaga) //saga는 combinereducer 필요없음\n  ]); // all은 배열을 받아서 배열 안에 있는 것을 한번에 실행해준다\n  // fork는 함수를 실행한다는 뜻\n  // fork 대신 call도 쓰지만 둘의 차이점이 있음\n  // fork는 비동기 함수호출, call은 동기 함수호출\n\n  /* call은 10번째 줄에서 loginAPI가 리턴할 때 까지 기다림\r\n   비동기는 요청을 기다리지 않고 바로 다음꺼 실행 */\n}","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/sagas/index.js"],"names":["all","fork","postSaga","userSaga","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,QAAwB,oBAAxB;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAChC;AACJ;AACA;AACA;AACA;AACG;AACA,QAAMJ,GAAG,CAAC,CACNC,IAAI,CAACC,QAAD,CADE,EAEND,IAAI,CAACE,QAAD,CAFE,CAGN;AAHM,GAAD,CAAT,CAPiC,CAYjC;AACA;AACA;AACA;;AACA;AACH;AACC","sourcesContent":["import {all, fork} from 'redux-saga/effects';\r\n\r\nimport postSaga from './post';\r\nimport userSaga from './user';\r\n\r\nexport default function* rootSaga() {\r\n    /* *=generator 문법 자체가 이렇게 생김(saga에서) \r\n    generator는 함수이름.next() 뒤에 넥스트를 써주어야 한다 \r\n    generator함수는 안에 yield를 넣어주면 거기서 멈춤, 그리고 또 호출하면 멈춘곳에서부터\r\n    다시 시작하고 또 yield가 있으면 멈춤, 또 호출하면 멈춘곳에서부터 시작 \r\n    */\r\n   // 굳이 yield를 적는 이유는 한줄 한줄 실행해 볼 수 있기 때문에\r\n   yield all([\r\n       fork(postSaga),\r\n       fork(userSaga),\r\n       //saga는 combinereducer 필요없음\r\n   ])\r\n   // all은 배열을 받아서 배열 안에 있는 것을 한번에 실행해준다\r\n   // fork는 함수를 실행한다는 뜻\r\n   // fork 대신 call도 쓰지만 둘의 차이점이 있음\r\n   // fork는 비동기 함수호출, call은 동기 함수호출\r\n   /* call은 10번째 줄에서 loginAPI가 리턴할 때 까지 기다림\r\n    비동기는 요청을 기다리지 않고 바로 다음꺼 실행 */\r\n}"]},"metadata":{},"sourceType":"module"}