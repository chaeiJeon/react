{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'halo'\n    },\n    content: '첫번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAxMDJfMTQ3%2FMDAxNjA5NTI1NTQyMTM4.7KZAtCG05g_xAqB-O5Aly51dg3t-yeD3XDkOV56W5E4g.kFQxL-ab0KWEAolEYkeBlv4os-cwTfVpKGTonhR5XGIg.JPEG.1993suji%2FA1B6FB71-11E4-4C9A-B743-E7543DE2F83A.jpg&type=a340\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fcafefiles.naver.net%2FMjAyMDAyMDhfMjAz%2FMDAxNTgxMTY0MDUyNTEx.2IU1wTla8ax8l3tR6J-VW3D_42FH4PLvNci97mrtFl8g.zckwx6NxjVA4w9EcSbcD4cvv7dyJk9dO2H9tak6Udjog.JPEG%2FexternalFile.jpg&type=a340\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fcafefiles.naver.net%2FMjAyMDAyMDhfMjAz%2FMDAxNTgxMTY0MDUyNTEx.2IU1wTla8ax8l3tR6J-VW3D_42FH4PLvNci97mrtFl8g.zckwx6NxjVA4w9EcSbcD4cvv7dyJk9dO2H9tak6Udjog.JPEG%2FexternalFile.jpg&type=a340\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nek'\n      },\n      content: '개정판'\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'hh'\n      },\n      content: '언제 나와용'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // ACTION이름을 상수로 빼준 이유 : 중간에 오타를 막기 위해(변수로 지정하면 오타나면 오류가 난다)\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'codl'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  User: {\n    id: 1,\n    nickname: 'hal'\n  },\n  content: data\n});\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      console.log('reducer ADD_POST_SUCCESS');\n      console.log(action);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(v => v.id === action.data),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const mainPosts = [...state.mainPosts];\n        const post = state.mainPosts[postIndex];\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n      ;\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/전채이/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","postAdded","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","state","action","console","log","error","filter","v","postIndex","findIndex","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts : [{\r\n        id : 1,\r\n        User : {\r\n            id:1,\r\n            nickname :'halo',\r\n        },\r\n        content : '첫번째 게시글 #해시태그 #익스프레스',\r\n        Images : [{\r\n            id : shortId.generate(),\r\n            src: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTAxMDJfMTQ3%2FMDAxNjA5NTI1NTQyMTM4.7KZAtCG05g_xAqB-O5Aly51dg3t-yeD3XDkOV56W5E4g.kFQxL-ab0KWEAolEYkeBlv4os-cwTfVpKGTonhR5XGIg.JPEG.1993suji%2FA1B6FB71-11E4-4C9A-B743-E7543DE2F83A.jpg&type=a340\",\r\n        },{\r\n            id : shortId.generate(),\r\n            src : \"https://search.pstatic.net/common/?src=http%3A%2F%2Fcafefiles.naver.net%2FMjAyMDAyMDhfMjAz%2FMDAxNTgxMTY0MDUyNTEx.2IU1wTla8ax8l3tR6J-VW3D_42FH4PLvNci97mrtFl8g.zckwx6NxjVA4w9EcSbcD4cvv7dyJk9dO2H9tak6Udjog.JPEG%2FexternalFile.jpg&type=a340\",\r\n        },{\r\n            id : shortId.generate(),\r\n            src : \"https://search.pstatic.net/common/?src=http%3A%2F%2Fcafefiles.naver.net%2FMjAyMDAyMDhfMjAz%2FMDAxNTgxMTY0MDUyNTEx.2IU1wTla8ax8l3tR6J-VW3D_42FH4PLvNci97mrtFl8g.zckwx6NxjVA4w9EcSbcD4cvv7dyJk9dO2H9tak6Udjog.JPEG%2FexternalFile.jpg&type=a340\",\r\n        }],\r\n        Comments : [\r\n            {  \r\n            id : shortId.generate(),\r\n            User : {\r\n                nickname : 'nek'\r\n            },\r\n            content : '개정판',\r\n            },\r\n            {\r\n            id : shortId.generate(),\r\n            User : {\r\n                nickname : 'hh',\r\n            },\r\n            content : '언제 나와용',\r\n            },\r\n        ]\r\n    }],\r\n    imagePaths : [],\r\n    postAdded: false,\r\n    addPostLoading : false,\r\n    addPostDone : false,\r\n    addPostError : null,\r\n    removePostLoading : false,\r\n    removePostDone : false,\r\n    removePostError : null,\r\n    addCommentLoading : false,\r\n    addCommentDone : false,\r\n    addCommentError : null,\r\n}\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\r\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\r\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\r\n\r\n\r\n// ACTION이름을 상수로 빼준 이유 : 중간에 오타를 막기 위해(변수로 지정하면 오타나면 오류가 난다)\r\nexport const addPost= (data) => ({\r\n    type : ADD_POST_REQUEST,\r\n    data,\r\n});\r\nexport const addComment= (data) => ({\r\n    type : ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content : data.content,\r\n    User : {\r\n        id:1,\r\n        nickname : 'codl',\r\n    },\r\n    Images : [],\r\n    Comments : [],\r\n});\r\nconst dummyComment = (data) =>({\r\n    id : shortId.generate(),\r\n    User : {\r\n        id : 1,\r\n        nickname : 'hal'\r\n    },\r\n    content : data,\r\n})\r\n\r\nexport default (state=initialState, action)=>{\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading : true,\r\n                addPostDone : false,\r\n                addPostError : null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            console.log('reducer ADD_POST_SUCCESS');\r\n            console.log(action);\r\n            return{\r\n                ...state,\r\n                mainPosts : [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading : false,\r\n                addPostDone : true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return{\r\n                ...state,\r\n                addPostLoading : false,\r\n                addPostError : action.error,\r\n            };\r\n            case REMOVE_POST_REQUEST:\r\n                return {\r\n                    ...state,\r\n                    removePostLoading : true,\r\n                    removePostDone : false,\r\n                    removePostError : null,\r\n                };\r\n            case REMOVE_POST_SUCCESS:\r\n                return{\r\n                    ...state,\r\n                    mainPosts : state.mainPosts.filter((v)=>v.id === action.data),\r\n                    removePostLoading : false,\r\n                    removePostDone : true,\r\n                };\r\n            case REMOVE_POST_FAILURE:\r\n                return{\r\n                    ...state,\r\n                    removePostLoading : false,\r\n                    removePostError : action.error,\r\n                };\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading : true,\r\n                addCommentDone : false,\r\n                addCommentError : null,\r\n            };\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex((v)=>v.id===action.data.postId)\r\n            const mainPosts = [...state.mainPosts];\r\n            const post = state.mainPosts[postIndex];\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            mainPosts[postIndex]=post;\r\n\r\n            return{\r\n                ...state,\r\n                mainPosts,\r\n                addCommentLoading : false,\r\n                addCommentDone : true,\r\n            }};\r\n        case ADD_COMMENT_FAILURE:\r\n            return{\r\n                ...state,\r\n                addCommentLoading : false,\r\n                addCommentError : action.error,\r\n            }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}